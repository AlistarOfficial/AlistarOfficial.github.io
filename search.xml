<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alistarの作品集</title>
    <url>/2023/01/15/%E4%BD%9C%E5%93%81%E9%9B%86/</url>
    <content><![CDATA[<h2 id="混音制作"><a href="#混音制作" class="headerlink" title="混音制作"></a>混音制作</h2><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css">
<script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" ></script>
<script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js" ></script>
<meting-js server="netease" type="playlist" id="6781450024" listmaxheight="200px"></meting-js>

<p><em>以下为备用歌单</em></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=6781450024&auto=0&height=430"></iframe>

<span id="more"></span>

<h2 id="Beat制作"><a href="#Beat制作" class="headerlink" title="Beat制作"></a>Beat制作</h2><p><meting-js server="netease" type="playlist" id="7381042416" listmaxheight="200px"></meting-js></p>
<p><em>以下为备用歌单</em></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=7381042416&auto=0&height=430"></iframe>

]]></content>
  </entry>
  <entry>
    <title>杜比全景声后期制作官方教程 1.1 超越多声道音频</title>
    <url>/2023/02/11/%E6%9D%9C%E6%AF%94%E5%85%A8%E6%99%AF%E5%A3%B0%E5%90%8E%E6%9C%9F%E5%88%B6%E4%BD%9C%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B-1-1-%E8%B6%85%E8%B6%8A%E5%A4%9A%E5%A3%B0%E9%81%93%E9%9F%B3%E9%A2%91/</url>
    <content><![CDATA[<blockquote>
<p>Dolby Atmos 是一种环绕声音频格式，无论是在影院，家里还是移动设备上，都能带给听众身临其境的体验。本课程旨在让你熟悉使用 DAW 来进行 Dolby Atmos 内容创作的工作流，熟悉 Dolby Atmos Renderer（渲染器）以及其他组件。<br>在深入了解 Dolby Atmos 工作流之前，我们先来了解一下 Dolby Atmos 的概念，搞清楚 Dolby Atmos 的内容是怎么交付给消费者端的。</p>
</blockquote>
<hr>
<span id="more"></span>

<p><em>翻译：Alistar</em></p>
<p><em>出处：Dolby Atmos Post-Production Course</em></p>
<h1 id="音床：Audio-Bed"><a href="#音床：Audio-Bed" class="headerlink" title="音床：Audio Bed"></a>音床：Audio Bed</h1><p>在传统的多声道音频中，声道就对应着具体的扬声器位置。比如说，如果混音师想要一个声音从左环绕扬声器发出来，他们就会把声音输出到左环绕扬声器对应的 Bus，或者 pan 到左环绕声道。如果他想要声音像是在左侧扬声器和左环绕扬声器之间，那么就需要把声音 pan 到这两个声道之间，来创造出幻象声像（就像立体声扬声器的幻象中心）。Dolby Atmos 也应用了传统的多声道系统，将这些声道统称为<strong>音床</strong>。音床的配置范围下至立体声，上至 7.1.2 配置。</p>
<h1 id="声音对象和对象元数据：Object-Audio-and-Object-Metadata"><a href="#声音对象和对象元数据：Object-Audio-and-Object-Metadata" class="headerlink" title="声音对象和对象元数据：Object Audio and Object Metadata"></a>声音对象和对象元数据：Object Audio and Object Metadata</h1><p>除了音床之外，Dolby Atmos 还引入了<strong>声音对象</strong>的概念。声音对象并不是直接 bus 或者 pan 到声道，而是会以 X，Y，Z 坐标的形式记录下声像信息。而这些 X，Y，Z 轴坐标以及声音对象的大小信息，会和声音一起，记录为<strong>声音对象元数据</strong>（Object Audio Metadata，OAMD）。OAMD 是动态的，当 Dolby Atmos Renderer 和 DAW 同步时，它会实时更新每一次的声像移动。</p>
<p>声音对象和对象元数据是和音床分开维护的。在终端用户的设备上，OAMD 用于将对象渲染到正确的位置上，适应各种配置的扬声器系统。这就让我们能够在各种扬声器配置下去对应处理每个扬声器，提高了声像信息的准确度。这一点是基于离散的多声道的系统所不能做到的。</p>
<p>混合并记录音床和声音对象（及其 OAMD）信息就是 Dolby Atmos 内容的创建方式。</p>
<p>Dolby Atmos Renderer 能够捕获多达 128 个音频轨道。前 10 个轨道专门用于捕获音床信号，最大可支持 7.1.2，剩下的 118 个输入可以用于声音对象或者附加的音床。附加的音床轨可以让多个 DAW 系统在不同的 Stems 上工作变得更简单，也可以用来简化生成基于多声道系统 Stems 的工作流。增加音床数量会减少声音对象可用的轨道数。之后会有更多这方面的内容。</p>
<h1 id="声音对象渲染器：Object-Audio-Renderer"><a href="#声音对象渲染器：Object-Audio-Renderer" class="headerlink" title="声音对象渲染器：Object Audio Renderer"></a>声音对象渲染器：Object Audio Renderer</h1><p>在 Dolby Atmos 环境下混音，建议的扬声器配置是 <code>7.1.4</code>。</p>
<p>然而，实际的终端设备并不都是这个配置。我们的混音是通过音床和带有 OAMD 的声音对象所产生的，Dolby Atmos Renderer 会把这些信息转译为现实中的扬声器布局，而扬声器的配置有很多种。在专业的混音中，这可能包括了从耳机上的双耳音频到 7.1.4 以上的扬声器布局。</p>
<p>所以，Dolby Atmos 还引入了另一个渲染器：<strong>声音对象渲染器</strong>，它是 Dolby Atmos 的另一个核心概念。在使用 Dolby Atmos Renderer 混音以及播放 Dolby Atmos Master Files 时，都会用到声音对象渲染器（OAR）。OAR 将音床渲染到可用的扬声器上，并且把声音对象 渲染到 OAMD 提供的空间坐标上去。这种 OAR 渲染充分利用了可用的扬声器，能够适应各种扬声器配置，而这如前所说，是传统的环绕声系统所做不到的。</p>
<p>对于所有音床，声音对象和 OAMD 的信息录制，以及用 OAR 再现这些内容的过程，就是 Dolby Atmos 的本质。（这些录制下来的混音有时候被称为 Printmaster 或 Master File）。</p>
<h1 id="影院和家庭-Dolby-Atmos-之间的区别"><a href="#影院和家庭-Dolby-Atmos-之间的区别" class="headerlink" title="影院和家庭 Dolby Atmos 之间的区别"></a>影院和家庭 Dolby Atmos 之间的区别</h1><p>如前所述，Dolby Atmos Renderer 可以录制记录多达 128 个轨道，其中包括 10 个通道的音床轨和 118 个通道的带有 OAMD 信息的声音对象。在影院中，Dolby Atmos 的 Master File 是从数字影院服务器上的数字影院包中回放的。所有 128 个轨道被 Dolby Cinema Processor（杜比影院处理器）中的 OAR 充分利用，将音床和 OAMD 信息传递给 64 个独立的扬声器。这为电影院的观众创造出了一个完整的沉浸式音频的体验。</p>
<p>但是，由于 OTT 流媒体传输的带宽限制以及蓝光文件的文件大小限制，想要把完整的 Dolby Atmos Master 文件（多达 128 轨以及包含的 OAMD 信息）传达到家庭听众端是不现实的。此外，消费设备中的 OAR 也不可能拥有呈现完整的 Atmos 所需的处理能力。</p>
<p>为了向家庭用户提供 Dolby Atmos，我们引入了两个核心概念来减少比特率，文件大小以及复杂性，同时保留原始混音的艺术意图，提供完整的家庭沉浸式音频的体验。这两个概念分别是 <code>Spatial Coding</code>（空间编码）和使用 <code>delivery Codecs</code>（传输编解码器）。</p>
<h1 id="空间编码：Spatial-Coding"><a href="#空间编码：Spatial-Coding" class="headerlink" title="空间编码：Spatial Coding"></a>空间编码：Spatial Coding</h1><p>空间编码能够将完整的 Dolby Atmos 呈现缩减成一个更为精简的数据集。它将 128 个轨道以及 多达 118 个声音对象中的 OAMD 信息缩减成 12，14 或者 16 个 Elements（元素）。空间编码是将 Dolby Atmos 混音传达到家庭用户端的第一步。</p>
<p>空间编码使用了响度和位置算法，动态地将临近的音床和声音对象中的音频编为一组，成为一个 Element（有时候也叫做集群），Element 中包含着 OAMD 信息。这些 Element 本身可以随着时间推移移动，而音床和声音对象可以在元素之间移动，这样就能更准确地反映它们的位置和运动轨迹。以下是空间编码处理的示意图。</p>
<p><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/%E7%A9%BA%E9%97%B4%E7%BC%96%E7%A0%81%E8%BF%87%E7%A8%8B.3lzbki1zas60.jpg"></p>
<p>虽然说完整的 Dolby Atmos 中可能会有多达 128 轨，但很少会同一时间用到所有的轨道。即便是再复杂和混乱的混音，空间编码产生的动态 Elements 也能给 OAR 提供足够的空间分辨率，以重现一个身临其境的声场。在我们推荐的扬声器配置 7.1.4 以及常见的 9.1.6 甚至更多的家庭影院扬声器配置上，空间编码的处理过程对大多数内容都不会有过多的影响。</p>
<h1 id="空间编码模拟：Spatial-Coding-Emulation"><a href="#空间编码模拟：Spatial-Coding-Emulation" class="headerlink" title="空间编码模拟：Spatial Coding Emulation"></a>空间编码模拟：Spatial Coding Emulation</h1><p>空间编码的过程是 Dolby Atmos 编码过程的一部分，发生在后期制作的下游阶段。虽然通常来说空间编码不会对声音有太多影响，但在有时候是会和我们预期的听觉效果不太一样（这取决于使用的 Element 数量）。</p>
<p>因此，Dolby Atmos Renderer 提供了一个<strong>空间编码模拟</strong>的功能，允许混音师在编码过程之前就提前试听到空间编码后的声音呈现。由于我们最终给到家庭用户的 Dolby Atmos 成品是进行了空间编码处理的，所以，当我们混音到差不多满意的阶段时，就应该打开空间编码模拟来对混音做出调整，这是非常重要的。当然，我们在最初的声音设计和音频编辑的过程中是不需要打开这个功能的。</p>
<p>我们可以模拟使用了 12，14 或者 16 个 Element 的空间编码效果。而可用的 Element 数量是会因为编解码器和比特率的不同而变化的。因此，我们需要去了解最终的交付方式，以便进行正确的监听。想要更深入地了解交付到消费者端的 Dolby Atmos 的 Dolby 编解码器，可以看附录 A 的内容。</p>
<p><em>注：空间编码不会用到双耳音频的渲染中。</em></p>
<h1 id="重渲染：Re-renders"><a href="#重渲染：Re-renders" class="headerlink" title="重渲染：Re-renders"></a>重渲染：Re-renders</h1><p>除了可以将信息录制到 Dolby Atmos 母带文件以及导出成其他的母带格式之外，Dolby Atmos Renderer 还可以用来输出传统的多声道内容。这些重渲染的产物是由 OAR 生成的。这种重渲染可以实时输出（分配到对应的硬件输出），也可以回录到 DAW 中或者离线导出。</p>
<p>重渲染的范围下至立体声，上至 9.1.6 以及 Ambisonic 格式。在 Dolby Atmos 中创建的内容，最常见的输出配置是立体声，5.1，7.1 和 7.1.4（用于游戏引擎比如 <code>Wwise</code> 和 <code>Unity</code>）。重渲染内容可以包含完整的混音，也可以通过输入的分组来进行自定义重渲染内容。</p>
<h1 id="单音床和多音床工作流"><a href="#单音床和多音床工作流" class="headerlink" title="单音床和多音床工作流"></a>单音床和多音床工作流</h1><p>Dolby Atmos Renderer 的前十个输入是专门留给音床输入的。音床的范围可以从立体声一直到7.1.2。剩下的 118 个输入可以用于声音对象和附加的音床。</p>
<p>混音师通常会在 DAW 中将声音进行分组，形成不同的 stems。在后期制作中，通常会有对话、音乐、效果类的 stem，也可能会有 旁白，拟音等 stem。在音乐制作中，通常会有 鼓、吉他、键盘、人声等 stem。在 Dolby Atmos 工作环境下，混音师可以为每个 stem 都分配多个对应的音床。</p>
<p><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/%E9%9F%B3%E5%BA%8A.47cpvyhoabc0.jpg"></p>
<p>音床轨可以汇总 &#x2F; 组合，成为一个新的复合音床，再输出到 Renderer 的前十个输入中，省出输入位置给声音对象使用。</p>
<p>如果混音师需要在 Dolby Atmos 混音环境下，导出基于声道的 stem，那么混音师就必须选中需要的轨道并多次导出。</p>
<p>另一个方法就是使用多音床工作流。每个 stem 都有专用的音床轨，每个音床又都有各自独占的输出，给到 Renderer 的对应的独占的输入中去。</p>
<p><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/%E5%A4%9A%E9%9F%B3%E5%BA%8A%E5%B7%A5%E4%BD%9C%E6%B5%81.6cjo2ml5mmg0.jpg"></p>
<p>在 Renderer 中，专用一个 stem 的音床和声音对象可以分为一组，这样就可以生成基于通道的 stem，而不用在 DAW 中多次静音轨道再分别导出，能节约很多时间。但是，这样做留给声音对象的 Renderer 输入就会减少。</p>
<p>这种方法对于多 DAW 分别处理特定的 stem 这样的工作流也很重要。每个 DAW 都会分配到特定的 Renderer 输入，留给它们需要处理的 stem 对应的音床和声音对象。</p>
<p>使用多音床工作流和 Re-renders 是 Dolby Atmos 能够 <strong>Master Once &#x2F; Deliver Everywhere</strong>（即在 Dolby Atmos 环境下混音，通过导出非 Atmos 格式的内容来保证在各种终端上的兼容性）的部分前提。通过使用不同的 downmix 模式 和 trim，能在导出的时候具有很高的灵活度，保证在 Dolby Atmos 中做出的混音，导成基于声道的格式后，能够和在传统环绕声格式下做的多声道作品一样好，甚至更好。</p>
<h1 id="Dolby-Atmos-中的响度计量"><a href="#Dolby-Atmos-中的响度计量" class="headerlink" title="Dolby Atmos 中的响度计量"></a>Dolby Atmos 中的响度计量</h1><p>响度计量不是在完整的 Dolby Atmos 上进行的，而是在重渲染的 5.1 上进行。这样做有两个原因。首先，目前并没有一个行之有效的方法来计量完整的 Dolby Atmos 内容的响度。其次，更重要的是，在 5.1 上来做响度计量可以确保 Dolby Atmos 内容和非 Dolby Atmos 内容之间的响度连续性。家庭观众在观看 Dolby Atmos 电影时，如果切换回 5.1 内容，不太会感知到响度有变化。</p>
<p>Dolby Atmos Renderer 内置的实时和离线响度计量都是可用的。另外，生成的重渲染 5.1 内容的响度还可以用响度 apps 和 DAW 插件进行计量。虽然不同的交付平台和格式会有不同的响度要求，<strong>但是一般来说，- 23 LUFS、-24 LKFS 和 - 27 LKFS 是比较常见的响度目标</strong>。</p>
<p>在 Dolby Atmos 内容中，即使在 DAW 中应用了限制器，也很难去达到指定的 True Peak（dBTP）目标值。更不用说在重渲染成 5.1 内容时不可预知的 summing 过程也会影响 True Peak。另外，True Peak 的计量性质也是插值的。</p>
<p>虽然在 5.1 环境下工作时，通常会有具体的 True Peak 限制的交付标准，但在 Dolby Atmos 工作时，True Peak 的标准只能是一个<strong>目标值</strong>，而不是绝对值。只要 dBTP 的目标值是 - 2 dBTP 并且不超过 -. 1 dBTP，在编码过程中使用的限制器就足以防止音频削波。</p>
<p>如果必须满足重渲染的多声道音频的真实峰值限制标准，则重渲染内容需要在 DAW 里进行<strong>额外的限制步骤</strong>。</p>
<p>Dolby Atmos Renderer 中的响度测量工具中有内嵌的 soft clip 限制器，可以模拟编码过程。如果使用外部响度测量应用程序或插件，那么响度计量的对象就应该是应用了这个 soft clip 限制器的 5.1 重渲染内容，这样才能保证计量结果的一致性。</p>
<p>在编码过程中也会进行响度计量，并且根据计量结果来设置 dianorm（控制重放增益的参数） 元数据值。</p>
<h1 id="Dolby-Atmos-Mater-格式"><a href="#Dolby-Atmos-Mater-格式" class="headerlink" title="Dolby Atmos Mater 格式"></a>Dolby Atmos Mater 格式</h1><p>Dolby Atmos Renderer 最多可记录 128 个输入，其中包括了音床，声音对象，OAMD 和 双耳音频、Downmix 和 Trim 元数据、输入和重渲染配置等信息。</p>
<p>这些信息都会记录到 <strong>Dolby Atmos Master File Set</strong>（DAMF）。这是 Dolby Atmos Renderer 的	原生格式，分别又记录为以下三个文件集：</p>
<ul>
<li><code>.atmos</code> - 一个 XML 文件，包含了有关 Dolby Atmos 演示的信息和其他文件的索引信息。.atmos 文件包括了音床和声音对象输入的数量、帧率、文件开始处、第一帧动作、空间编码中用到的 Element 数量、downmix 和 Trim 元数据。</li>
<li><code>.atmos.metadata</code> - 一个 XML 文件，包含了记录每个声音对象的动态位置和大小信息的 OAMD 数据，以及双耳音频元数据设置。</li>
<li><code>.atmos.audio</code> - 一个 CAF（核心音频格式 Core Audio Format）格式的文件，包含了多达 128 轨的交叠在一起的音频。</li>
<li><code>.atmos</code> 和 <code>.atmos.metadata</code> 文件可以用文本编辑器打开，但是不建议直接编辑这些文件，有可能会破坏文件集。</li>
</ul>
<p>虽然新的 master 都会记录为 DAMF 格式，但还有两种格式用于分发、编码或者进一步的编辑。</p>
<p><code>ADM BWF</code> - 全称为 Audio Definition Model Broadcast Wav Format，是 DAMF 的替代格式。（有时称为 ADM BWAV），.atmos 和.atmos.metadata 文件中的信息都包含在 wav 文件头的数据块中。这种格式自身的负载量最多为 128 轨的交叠音频。ADM 有几个优点：</p>
<ul>
<li>ADM BWF 是一个单一的文件，而不是在一个文件夹中的三个文件，这让它可以在不同设备软件间之间传输。</li>
<li>ADM BWF 可以导入到 DAW 里，使得音床和声音对象以及对应的位置元数据可以在 DAW 里复现。也让后续的编辑工作，如语言替换、时序一致性、审查编辑等等，可以在 remaster 之前进行。</li>
<li>ADM BWF 可以被编码为 <code>Dolby True HD</code>，<code>Dolby Digital Plus JOC</code> 和 <code>Dolby AC-4 IMS</code>，是流媒体运营商和蓝光制造商的主要交付格式。</li>
</ul>
<p><code>IMF.IAB</code> - Immersive Audio Bitstream 是 IMF（Interoperability Master Format） 的夹层格式。IAB 被认为是夹层格式而不是 Master 格式，因为 OAMD 是量化的。第三方 IMF 打包工具用 IMF.mxf 格式来为 Dolby Atmos 和视频（包括 Dolby Vision）内容创建交付容器。<strong>IMF.IAB 格式不用于 Dolby Atmos Music</strong>。</p>
<p>虽然 Dolby Atmos Renderer 原生只以 .atmos 格式记录，但它可以转换和导出为 ADM BWF 和 IAB.mxf 格式。可以导出整个文件，也可以进行基本的顶部 &#x2F; 尾部（指定范围）编辑。</p>
<p>Dolby Atmos Renderer 还可以打开 ADM BWF 和 IAB.mxf 格式的文件作为 Master 文件，用于回访，质量控制（Quality Control，QC），基本的顶部 &#x2F; 尾部编辑，在两种格式之间转换和重渲染。然而，打开 ADM BWF 和 IAB.mxf 格式的文件也有一些限制。在这两种格式下，不能执行输入数值和其他的元数据编辑操作。也不能从 ADM BWF 和 IAB.mxf 转换为 .atmos 格式的文件。</p>
<p>Dolby Atmos 转换工具（Dolby Atmos Conversion Tool，DACT）是 Dolby Atmos Renderer 的配套应用，可以将 ADM BWF 和 IAB.mxf 转换为 .atmos 格式，执行格式和帧率的转换，以及对 Master 文件进行复杂的编辑操作。Dolby Atmos 转换工具是免费的。</p>
<h1 id="技术交付规范"><a href="#技术交付规范" class="headerlink" title="技术交付规范"></a>技术交付规范</h1><p>流媒体服务要求的交付成品标准在技术交付规范中作了说明。规范中涉及到响度，峰值目标，master 文件的格式和数量以及多声道交付成品和命名管理，不同的流媒体服务会有不同的要求。有些规范要求用 Pro Tools Session 和 ADB BWF 来存档。了解交付规范和标准是实现高效工作流的关键。</p>
]]></content>
      <categories>
        <category>混音知识</category>
      </categories>
      <tags>
        <tag>译制教程</tag>
        <tag>全景声</tag>
        <tag>dolbyatmos</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是环绕声？5.1，7.1，杜比全景声全解</title>
    <url>/2023/01/22/%E4%BB%80%E4%B9%88%E6%98%AF%E7%8E%AF%E7%BB%95%E5%A3%B0%EF%BC%9F5-1%EF%BC%8C7-1%EF%BC%8C%E6%9D%9C%E6%AF%94%E5%85%A8%E6%99%AF%E5%A3%B0%E5%85%A8%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>在我们看电影和电视的时候，视觉和听觉感受同样重要，声音带来的体验是荧幕所不能提供的。而在听音乐时，声音更是主角。随着技术的进步，我们的听音体验也随之进化。现在，杜比全景声似乎是最新潮的玩意儿，那么它和环绕声的关系是怎么样的呢？它们之间的区别在哪里？请看文章。</p>
</blockquote>
<p><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/dolbyatmos-logo-dark-bkg-e_1600x.gp1gu1txsbc.jpg"></p>
<span id="more"></span>

<p>作者：Alistar</p>
<h1 id="基础：立体声"><a href="#基础：立体声" class="headerlink" title="基础：立体声"></a>基础：立体声</h1><p>立体声当然不是环绕声，但我们可以从这个概念开始说起。就像所有哺乳动物一样，人类有两只耳朵，位于头部两侧。耳朵让我们能够听到来自不同方向的声音，但我们听到的声音还并不仅仅是简单地来自左边或者右边。每个耳膜都能捕捉到相当宽的频率范围的声音，而耳朵的形状进一步细化了这些信号从不同方向传来时，人脑的不同处理方式。我们的大脑接收这些不同的频率信息，捕捉左右耳之间的微小延迟，所以我们能识别声源的方向。简单地说，<strong>我们的耳朵本质上是一对麦克风</strong>，但它有强大的滤波器和处理器来加强它的性能。</p>
<img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/neumann.6urjchck5280.jpg" style="zoom: 33%;" />



<p>同理，就像耳朵一样，立体声系统不只是简单地从两个方向呈现声音。当左右声道不同频率的信号在空间中混合的时候，<strong>信号会产生方向性</strong>。由于立体声系统只用两个声源，所以它不能产生那种像是从所有方向发声的那种声音。但是，在环绕声系统中，多通道的信号在空间中混合的概念依然是使用的。</p>
<h1 id="常规的环绕声：5-1-和-7-1"><a href="#常规的环绕声：5-1-和-7-1" class="headerlink" title="常规的环绕声：5.1 和 7.1"></a>常规的环绕声：5.1 和 7.1</h1><p>最早也是最成熟的环绕声技术是基于<strong>通道</strong>（Channel）的。环绕声系统一般说的是 <code>5.1</code> 或者 <code>7.1</code> 配置。对应这两种配置，电视节目，电影和音乐通常被混合成 6 个或者 8 个通道：<u>5.1 音频的左、中、右、左环绕、右环绕和低音炮，7.1音频的左、中、右、侧左、侧右、后左、后右和低音炮。</u></p>
<img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/5.1系统.2yknzo074yy0.jpg" style="zoom:50%;" />



<p>对于支持这种环绕声的媒体格式来说，X. X 的第一个数字代表它<strong>编码了多少个有方向性的声源</strong>（每一个声源都能由扬声器单独播放），第二个数字是指<strong>低音炮通道</strong>，这个通道处理超低频信息，它产生的振动既能够被听到，也能被感受到。因为超低频信号波长很长，且更多的是身体去感受到这些频率，所以它们几乎没有方向性信息，（这也是你只需要一个低音炮的原因）。</p>
<p>5.1 和 7.1 声道通常由主扬声器，卫星扬声器和一个单独的低音炮组成。主扬声器通常是你可以放在屏幕前的这部分扬声器，包含了左、右和中央通道。这三个通道是混音中最重要的通道，因为大部分的音频和对话都会在这三个通道里处理。</p>
<p>卫星扬声器使得声音能从侧面和后方传来，实现了环绕声中的“环绕”部分。在 5.1 声道系统中，卫星扬声器布置在听众左右两边稍微靠后的位置。7.1 声道中系统中有两对卫星扬声器，分别覆盖左右两侧和左后、右后方。</p>
<p>在空间音频（Spatial Audio）技术出现之前，大多数电影电视节目的环绕声都是混合 6 个或者 8 个独立的音频通道，以适配典型的环绕声系统中的扬声器数量。这些多通道可以向下混合成较少的通道，用于立体声扬声器、3.1 声道系统和其他形式的音响系统。市面上两个最大，也是最规范的环绕声格式，一个是 Dolby 的 Digital 5.1 或 7.1，一个是 DTS 5.1 或7.1。</p>
<h1 id="高度通道：5-1-2，9-2-4-等"><a href="#高度通道：5-1-2，9-2-4-等" class="headerlink" title="高度通道：5.1.2，9.2.4 等"></a>高度通道：5.1.2，9.2.4 等</h1><p>在 21 世纪初，出现了高度通道这个概念，这让环绕声的命名变得更加复杂。于是，环绕声系统的第三个数字就代表了<strong>位于扬声器上方的声源</strong>。高度通道通过单独的卫星扬声器或者用对着天花板的扬声器，把声音从天花板反弹下来或者从天花板处发声，这样就把环绕声构成的一个圆圈变成了一个圆顶，创造出了更加身临其境的体验。</p>
<img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/5.1.2系统.12r1ymmqtdeo.jpg" style="zoom: 33%;" />



<p>然而，作为一种环绕声格式，它只是通往空间音频的过渡点。不久后，空间音频技术将取而代之。</p>
<hr>
<h1 id="空间音频：Dolyb-Atmos-和-DTS-X"><a href="#空间音频：Dolyb-Atmos-和-DTS-X" class="headerlink" title="空间音频：Dolyb Atmos 和 DTS:X"></a>空间音频：Dolyb Atmos 和 DTS:X</h1><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/Atmos-vs-DTS-X.5sz5ppk5mpc0.jpg" style="zoom:50%;" />



<p><code>Dolby</code> 和 <code>DTS</code> 研究的空间音频处理技术是环绕声空间方面最新（也是使用效率最高）的进展之一。空间音频技术把媒体中的每个声源都单独映射到<strong>一个 360° 的球体中的某个位置上</strong>，包括高度信息。应用这项技术之后，电影或者音乐里的声音就不再是少数几个通道的声音混合起来，通过单独的单元组传给听众，而是可以在听众周围放上成千上万个声效。在空间音频中，每个声源都被映射到一个单独的位置上，所以空间音频有时候也被称为<strong>“基于对象”</strong>的音频。</p>
<p>当然，虽然说我们可以在 360° 的“球体”上放任意多的声音，但是我们的音频系统中不太可能有成千上万个卫星扬声器来作为声源的载体，所以，空间音频就被设计出了适配任何形式的音频系统的能力。任何支持空间音频格式的硬件都可以正确混合所有声源，以适应扬声器单元的数量。而更多的扬声器数量意味着更多的映射选项，<strong>所以为了获得最好的效果，至少需要一个 5.1 系统。</strong></p>
<p>应用最广泛的空间音频格式是 Dolby Atmos，DTS:X 紧随其后。Apple TV，Netflix 和 Disney+ 在它们大部分的新内容上都用上了 Dolby Atmos（杜比全景声）。而 DTS:X 则是出现在蓝光和超清蓝光片上更多。</p>
<h1 id="打个总结"><a href="#打个总结" class="headerlink" title="打个总结"></a>打个总结</h1><p>现在我们可以知道，Dolby Atmos 可以算作是环绕声的一种格式，但它又和传统的环绕声有所不同，一个基于通道，一个基于对象，使用的技术不尽相同。<strong>那么作为听众，我们需要用什么设备去欣赏空间音频的音乐，在哪里可以找到空间音频格式的资源；作为混音师，我们要用到什么工具来混空间音频作品。</strong>这些话题我们就在之后的文章里讨论喽，欢迎关注！</p>
]]></content>
      <categories>
        <category>混音知识</category>
      </categories>
      <tags>
        <tag>全景声</tag>
        <tag>dolbyatmos</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南09：如何创造出不自然的大厅混响</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9709%EF%BC%9A%E5%A6%82%E4%BD%95%E5%88%9B%E9%80%A0%E5%87%BA%E4%B8%8D%E8%87%AA%E7%84%B6%E7%9A%84%E5%A4%A7%E5%8E%85%E6%B7%B7%E5%93%8D/</url>
    <content><![CDATA[<blockquote>
<p>本文是 Valhalla Room 插件使用指南的第九篇也是最后一篇，介绍了怎么调出不自然的混响，也就是经典数字混响中的 Hall 预置的声音。</p>
</blockquote>
<span id="more"></span>
<p><em>翻译：Alistar</em></p>
<h3 id="不“厅堂”的厅堂声"><a href="#不“厅堂”的厅堂声" class="headerlink" title="不“厅堂”的厅堂声"></a>不“厅堂”的厅堂声</h3><p>在前一篇文章里，我们讨论了现实世界里厅堂混响的声音特点以及模拟这些特点的方法。<br>总的来说：</p>
<ul>
<li>真实的厅堂混响建立得较快。</li>
<li>混响时间在 1.6 到 2.1 s 之间。</li>
<li>低频的混响时间要比中频的混响时间长。</li>
<li>此外，还会使用一点调制，以创造出没有音高变化的高模态密度的感觉。</li>
</ul>
<p>如果我们想要的是真实的音乐厅的感觉，那么这些设置是很好的。但如果我们想要的是不真实的大厅混响呢？最早的商业混响，<code>EMT250</code> 和 <code>Lexicon224</code>，都是为了模仿音乐厅的感觉而产生的。但因为可以用于延迟线（Delay lines）的内存有限，所以两台混响都转而研制出了较大的混响时间可调节范围来避免可能出现的金属声。它们的声音听起来大而淡，混响声中调制效果很明显，混响时间可以达到 70 s 甚至更久。没有一个“真实”的音乐厅听起来是这样的，但它们确实很好听。</p>
<p>另外，像 <code>224</code>，<code>224XL</code> 和 <code>480L</code> 这样的硬件设备有能力人为地拉长混响的建立时间，所以这样的混响声会比真实的大厅更有“淡入”感。这并不符合现实的情况，但可以很好地分离输入信号和混响。</p>
<h3 id="怎么用-Valhalla-Room-调制出不自然的厅堂混响"><a href="#怎么用-Valhalla-Room-调制出不自然的厅堂混响" class="headerlink" title="怎么用 Valhalla Room 调制出不自然的厅堂混响"></a>怎么用 Valhalla Room 调制出不自然的厅堂混响</h3><p>幸运的是，Valhalla Room 除了可以模仿“真实空间”，还很擅长创造出不真实的大厅的声音。</p>
<p>以下是一些调节不自然的复古数字混响声的技巧：</p>
<ul>
<li>混响时间（Decay）可以任意调节，只要给你的感觉是对的。大多数经典数字混响的 Concert Hall 预置中，混响时间都在 6 s 以上。</li>
<li>使用 <code>Late Bass Mult</code> 来调节所需要的混响的清晰度。把这个值调节到 1.0 X 以下会在混响衰减的过程中听到更多的高频声，这可能会听起来不错。</li>
<li>调高调制深度！<code>Early Mod Depth</code> 和 <code>Late Mod Depth</code> 都可以调高，以得到那种有“晕船感”的混响。如果想要混响声变调不那么明显，可以把 <code>Mod Depth</code> 设置得低些，但同时要保持较高的调制频率。</li>
<li>Bright Room 模式有比其他模式更深更随机的调制声。</li>
<li>把 <code>Early Send</code> 设置为 100%，<code>Early Size</code> 要大于 100 ms，<code>Depth</code> 设置为100%。早期 Lexicon 混响里的深度选项以及后来 Lexicon 中的 <code>Shape/Spread</code> 选项，可以让用户调出一个建立得较慢的混响。通过把早期混响发到晚期混响里处理，并且设置一个较大的 <code>Early Size</code> 值，我们可以创造一个淡入的混响，而这个淡入的速率由 <code>Early Size</code> 决定。</li>
<li><code>Early Diffusion</code> 参数可以设置得偏低，来模拟许多早期混响器在早期建立阶段的颗粒感。</li>
<li>把 <code>High Cut</code> 设置在 5000 Hz 到 8000 Hz 之间，以模拟早期低采样率混响的黯淡的声音。</li>
</ul>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南08：如何模拟真实的音乐厅混响</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9708%EF%BC%9A%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9F%E7%9C%9F%E5%AE%9E%E7%9A%84%E9%9F%B3%E4%B9%90%E5%8E%85%E6%B7%B7%E5%93%8D/</url>
    <content><![CDATA[<blockquote>
<p>本文是 Valhalla Room 插件使用指南的第八篇，介绍了厅堂混响的特点以及我们应该怎么去模拟这些特性。</p>
</blockquote>
<span id="more"></span>
<p><em>翻译：Alistar</em></p>
<h3 id="厅堂混响的特点"><a href="#厅堂混响的特点" class="headerlink" title="厅堂混响的特点"></a>厅堂混响的特点</h3><p>给本插件取 Valhalla Room 这个名字是因为它可以调出真实房间里的混响感受。从这个角度看，音乐厅不过是大一点的房间。</p>
<p>上个世纪，人们对音乐厅的物理和混响特性进行了广泛地研究，从 Wallace Sabine（波士顿交响乐厅的声学顾问）开始，到 Leo Beranek，Yoichi Ando，Manfred Schroeder 等声学研究者，他们都一直致力于这项工作。</p>
<p>古典音乐的听众对音乐厅混响评价很高，而它们通常有以下特点：</p>
<ul>
<li><p>古典主义时期（1750 年至 1820 年）的音乐的混响时间为 1.6 到 1.8 秒，而浪漫主义时期的音乐则约为 1.9 到 2.1 秒。</p>
</li>
<li><p>预延迟在 25 ms 以下（这是直达声和第一次反射之间的时间），较短的预延迟设置，会产生一种“亲切感”。这就是为什么指挥家和观众往往更青睐“鞋盒状”的大厅。由于声音从管弦乐队到侧墙再到听众的距离相对较短，所以早期的横向反射开始得相当快。</p>
</li>
<li><p>很有<strong>温暖感</strong>，也就是低频音色很凸显。换句话说，低频的混响时间要比中频的混响时间更长。</p>
</li>
<li><p><strong>宽敞</strong>，听众听到的声音似乎来自一个比发出声音的乐器所在更广阔的空间。这往往和左右耳之间的信号的相位差异有关（通常被成为 IACC，即双耳互相关）。</p>
</li>
<li><p><strong>包围感</strong>，即混响似乎来自所有方向，而不是有限的方向。这意味着一个理想的大厅会很快将反射混合在一起，不会有任何来自某个位置的强烈而不连续的回声，也不会有大厅的某个部分的混响停留时间过长。</p>
</li>
</ul>
<h3 id="怎么用-Valhalla-Room-调制出厅堂混响"><a href="#怎么用-Valhalla-Room-调制出厅堂混响" class="headerlink" title="怎么用 Valhalla Room 调制出厅堂混响"></a>怎么用 Valhalla Room 调制出厅堂混响</h3><p>以上述特点作为标准，我们可以在 Valhalla Room 里调出一个真实的音乐厅预置。以下为较通用的准则：</p>
<ul>
<li><p>根据音乐的风格所需要的空间感，设置混响时间在 1.6 到 2.1 s。</p>
</li>
<li><p>设置很低的高切频点，在 4500 Hz 到 7000 Hz 之间，模拟空间对高频的吸收。</p>
</li>
<li><p>预延迟的参数值要和你想要模拟的大厅的第一声反射的时间间隔匹配，25 到 35 ms是一个比较“真实”的数值，设置得更短的时候，声音会更有“亲切感”。</p>
</li>
<li><p><code>Early Size</code> 参数应该在 20 到 50 ms之间，<code>Early Send</code> 开到最大，<code>Early Diffusion</code> 开到最大，以产生一个扩散的早期混响声。</p>
</li>
<li><p><code>Late Size</code> 应该大于 0.5。如果 <code>Late Size</code> 设置到最大，可能会有可闻的反射声，当然这也取决于我们选用的混响模式。所以这个参数要听着来调节到合适的数值。</p>
</li>
<li><p><code>Late High Xover</code> 应该设置得非常低，来给晚期混响带来一种滚降（大约设置为 2 到 4 kHz），而 <code>Late High Mult</code> 应该设置得比 1.0 X 低不少的值。</p>
</li>
<li><p><code>Late Cross</code> 应该要高于 0，以模拟真实大厅中的包围感。低于 1 的 <code>Late Cross</code> 有利于保留输入的立体声信号的空间感，所以这也需要根据需求来调整（从 0.5 开始向上或向下调节是不错的选择）。</p>
</li>
<li><p><code>Early Mod Depth</code> 应该设置为 0，来让声音更真实。较高的 <code>Early Mod Depth</code> 会使得早期混响的位置不自然地平移。<code>Late Mod Rate</code> 可以设置得比 0 高，一点点的调制声可以增强真实感，但是，要保持 <code>Late Mod Depth</code> 在 0.25 到 1 Hz范围内，以避免明显的音高变化。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南07：如何模拟教堂混响</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9707%EF%BC%9A%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9F%E6%95%99%E5%A0%82%E6%B7%B7%E5%93%8D/</url>
    <content><![CDATA[<blockquote>
<p>本文是 Valhalla Room 插件使用指南的第七篇，介绍了教堂混响的特点以及我们应该怎么去模拟这些特性。</p>
</blockquote>
<span id="more"></span>
<p><em>翻译：Alistar</em></p>
<p>要点如下：</p>
<ul>
<li>调高 <code>DECAY</code> 值，以符合在教堂混响中的混响时间长度。哥特式教堂的混响时间可以达到 12 s，而其他时代的大教堂往往更小，混响时间更短。</li>
<li><code>Late Size</code> 需要设置得较高，以反映出这种空间里的高模态密度。</li>
<li><code>Early Size</code> 应该设置得让混响有渐入感（即建立得较慢）。因为教堂的空间较大，所以能量也需要一定时间才能累积起来，这就带来的一个 Attack 较慢的混响时间。一个比较通行的法则就是把 <code>Early Size</code> 设置为混响时间的二十分之一（对于真正的大教堂来说，<code>Early Size</code> 值最高可以达到 500 ms 左右）。</li>
<li>为了从 <code>Early Size</code> 的设置上得到“淡入”效果，需要把 <code>Early Send</code> 设置为 1，<code>Depth</code> 设置为 100%。</li>
<li><code>Late High Mult</code> 参数应该设置得较低，比如 0.1 X。大教堂中包含的巨量空气增大了高频能量的损失。</li>
<li>设置 <code>High Cut</code> 和<code>Late High Xover</code>，以得到我们需要的混响亮度。这两个参数的频率设置得较低会更真实，但设置得较高的频率可能更适合那种“天籁之音”。</li>
<li>在模拟真实的混响时，把 <code>Early Mod Depth</code> 调低，但不要不敢去调高 <code>Late Mod Depth</code>。为了正确地模拟出大教堂中的模态密度，数字混响器必须要用到好几分钟的延迟数据，这使得 CPU 和内存的消耗远远超出了现代计算机能实时处理的范围。而调制延迟是创造出更高的模态密度感的一个好方法，并且，它听起来很漂亮。</li>
</ul>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南06：晚期反射的控制参数</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9706%EF%BC%9A%E6%99%9A%E6%9C%9F%E5%8F%8D%E5%B0%84%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>本文是 Valhalla Room 插件使用指南的第六篇，详细介绍了晚期反射的各个控制项的作用，在现代音乐中，我们主要听到的混响部分就是晚期混响，所以这部分的调节对混响的声音有很大影响。</p>
</blockquote>
<span id="more"></span>
<p><em>翻译：Alistar</em></p>
<p><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/20230116/Valhalla-room%E6%99%9A%E6%9C%9F%E5%8F%8D%E5%B0%84.171n5av5cluk.jpg"></p>
<hr>
<p>Valhalla Room 中通过点击 Late 按钮可以精细调节晚期混响的声音。</p>
<p>以下为每个参数的介绍。</p>
<h3 id="Late-Size"><a href="#Late-Size" class="headerlink" title="Late Size"></a>Late Size</h3><p>调节晚期混响的相对“房间”大小。参数值越大，对应的空间也就越大，带来更广的声音。在某些混响模式下，高 <code>Late Size</code> 值会带来可闻的早期回声，所以要靠耳朵来调节出需要的参数的大小。</p>
<h3 id="Late-Cross"><a href="#Late-Cross" class="headerlink" title="Late Cross"></a>Late Cross</h3><p>控制左右声道之间信号的耦合量。当 <code>Late Cross</code> 为 0，代表左右声道的混响是独立的，混响里只会包含各自声道的声音。随着 <code>Late Cross</code> 提高，混响会扩散到整个立体声像中，扩散的速度由 <code>Late Cross</code> 和 <code>Late Size</code> 决定（<code>Late Size</code> 越小，信号在左右声道间的扩散就越快）。当 <code>Late Cross</code> 小于 1 时，输入信号的立体声像会被在混响衰减的过程中得以保留。</p>
<h3 id="Mod-Rate"><a href="#Mod-Rate" class="headerlink" title="Mod Rate"></a>Mod Rate</h3><p>控制晚期混响的调制频率。这个参数更像是一个“平均”频率，因为晚期混响中有大量的调制进行，有多达几十个 LFO 工作，而它们都是随机的，有不同的基频。一般来说，0.5 Hz 左右的频率可以减弱混响里的人工感，而 1 Hz 以上的频率可以带来丰富的合唱效果。</p>
<h3 id="Mod-Depth"><a href="#Mod-Depth" class="headerlink" title="Mod Depth"></a>Mod Depth</h3><p>控制晚期混响的调制深度。需要注意的是，调制深度也取决于 <code>Reverb Mode</code> 混响模式的选择，在同样的参数下，Bright Room 模式会比其他模式有更明显的随机的颤音。</p>
<h3 id="Bass-Mult"><a href="#Bass-Mult" class="headerlink" title="Bass Mult"></a>Bass Mult</h3><p>调整低频的混响时间（以 <code>DECAY</code> 滑块设定的中频混响时间为基准）。以下举例说明：</p>
<ul>
<li><p>当 <code>Bass Mult</code> 设置为 0.5 X，<code>DECAY</code> 设置为 2 s，那么低频的混响时间就会是 1 s。</p>
</li>
<li><p>当 <code>Bass Mult</code> 设置为 2.0 X，<code>DECAY</code> 设置为 2 s，低频的混响时间就会是 4 s。</p>
</li>
</ul>
<p>从物理的角度来说，大于 1.0 X 的 <code>Bass Mult</code> 值可以模拟大厅和其他较大的空间，而 <code>Bass Mult</code> 小于 1.0 X 可以很好地模拟小空间。从听觉的角度来说，<code>Bass Mult</code> 大于 1.0 X 会增加温暖感，小于 1.0 X 会使声音更清晰。</p>
<h3 id="Bass-Xover"><a href="#Bass-Xover" class="headerlink" title="Bass Xover"></a>Bass Xover</h3><p>控制低频混响时间和中频混响时间的分频器的频率，单位为赫兹 Hz。一般来说，设置到 300 Hz 到 1500 Hz 之间比较合适。当然，超出这个范围的设置可以做出一些特殊效果。</p>
<h3 id="High-Mult"><a href="#High-Mult" class="headerlink" title="High Mult"></a>High Mult</h3><p>调整高频的混响时间，同样是以 <code>DECAY</code> 决定的中频的混响时间为基准。以下是例子：</p>
<ul>
<li>当 <code>High Mult</code> 设置为 0.25 X，<code>DECAY</code> 设置为 2 s，高频的混响时间会是 0.5 s。</li>
<li>当 <code>High Mult</code> 设置为 0.5 X，<code>DECAY</code> 设置为 2 s，高频的混响时间会是 1 s。</li>
</ul>
<p>从物理的角度来说，高频往往会被空气迅速地吸收，所以把 <code>High Mult</code> 设置为 0.5 X 或者更低，会产生一个更自然的晚期混响。从听觉的角度来看，可以用 <code>High Mult</code> 来控制晚期混响的亮度或者暗度，以符合你的口味。（译者注：虽然实际听起来和用 EQ 调整高频的结果类似，但是和混响 EQ 不是一个东西）</p>
<h3 id="High-Xover"><a href="#High-Xover" class="headerlink" title="High Xover"></a>High Xover</h3><p>控制中频和高频混响时间之间的分频频率，单位是赫兹 Hz。一般来说，3000 Hz 到 8000 Hz 之间是比较常规的设置。但具体设置什么值很大程度上取决于 <code>High Mult</code> 系数以及需要的效果。</p>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南05：早期反射 vs 早期能量</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9705%EF%BC%9A%E6%97%A9%E6%9C%9F%E5%8F%8D%E5%B0%84-vs-%E6%97%A9%E6%9C%9F%E8%83%BD%E9%87%8F/</url>
    <content><![CDATA[<blockquote>
<p>本文是 Valhalla Room 插件使用指南的第五篇，这篇文章讲述了 Valhalla Room 这款插件的早期反射为什么叫做早期能量更合适，也阐述了 Valhalla Room 的设计目标，欢迎食用。</p>
</blockquote>
<span id="more"></span>
<p><em>翻译：Alistar</em></p>
<p>Valhalla Room 的混响算法分为2个部分，早期和晚期。这是在算法混响中相当常见的划分。然而，虽然大多数混响算法将混响的早期部分描述为早期反射，但 Valhalla Room 的早期部分最好描述为 “早期能量”。</p>
<p>它们之间的差异如下：</p>
<ul>
<li><p>大多数有“早期反射”功能的混响器都使用了多达几十个不连续的多头延迟或者回声。这些延迟声通常是基于房间的光线跟踪模型，但没有考虑到真实的声学表面的扩散，以及在真实的演出空间的复杂性。家具，座椅，柱子，表演者，乐器等等的存在结合在一起，会形成一个非常复杂的反射模式，远不是几十个多头延迟所能复现的。</p>
</li>
<li><p>如前所述，使用多头延迟生成的早期回声复杂度没有真实环境中高，所以为了增加复杂程度，一些制造商采用了全通延迟来增加回声密度。这个方法在多数信号上都能正常工作，但在人声和冲激信号（即持续时间短，几乎是瞬发的信号，如鼓）上会带来金属声。关于全通延迟，作者有过文章详述，感兴趣的话可以自行了解。大多数混响器中的 <code>Diffusion</code> 扩散参数都可以当作是处理全通滤波器副作用的一个工具。用户可以通过改变 <code>Diffusion</code> 参数来控制全通延迟系数，以适应特定的输入信号。</p>
</li>
<li><p>Valhalla Room 插件并不打算模拟任何特定房间的几何构造。相反，它采取的方法是让早期能量尽可能的密集，没有染色，宽度大，以模拟出一个“并不存在”的房间。用户可以调节早期能量的持续时间（用 <code>Early Size</code> 参数）来模拟大的或者小的空间。10 到 50 ms是常见的模拟小空间的数值范围，而较大的数值可以更好地模拟大厅和教堂混响，这两种混响都需要一定的时间才能建立起早期反射的强度。</p>
</li>
<li><p>在 Valhalla Room 中，可以用 <code>Early Cross</code> 参数来控制左右通道之间的交叉馈送，以创造出能量在左右声道之间扩散的混响，这比较符合现实中的情况。我们也可以用这个参数来创造一个左右通道分离的早期能量，这可以很好地保护混音中的原始声像。</p>
</li>
<li><p>Valhalla Room 的早期反射部分没有全通延时，这可以避免短全通延时带来的染色问题。在本插件中，早期反射的 <code>Diffusion</code> 参数可以调节整体的回声密度，但它主要是为特殊效果服务的。你可以把 <code>Diffusion</code> 调到最高，它也不会出现某些混响器中高 <code>Diffusion</code> 带来的金属声。Valhalla Room 是从心理声学的角度设计的，并非是从物理学的角度。我们的目标是创造出一种声音来产生“理想”房间的听觉感受，而不是现实中存在的某个特定的房间。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南04：早期混响的控制参数</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9704%EF%BC%9A%E6%97%A9%E6%9C%9F%E6%B7%B7%E5%93%8D%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>本文是 Valhalla Room 插件使用指南的第四篇，详细介绍了早期反射的详细控制项，了解这些知识之后，可以让我们在塑造混响时更得心应手。</p>
</blockquote>
<span id="more"></span>

<p><em>翻译：Alistar</em></p>
<p><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/20230116/%E6%97%A9%E6%9C%9F%E5%8F%8D%E5%B0%84%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%82%E6%95%B0.v1oj3369xxs.jpg"></p>
<hr>
<p>Valhalla Room 可以分为有两个独立的混响部分，即<strong>早期和晚期</strong>。可以点击插件顶部的 Early 按钮来调节早期混响。</p>
<p>把 <code>Depth</code> 滑块设置到0%，就可以单独听到早期混响部分。<code>Depth</code> 值越高，听到的晚期混响也就越多，当设置为100% 时，就只能听到晚期混响。<br>以下是每个参数的概览：</p>
<h3 id="Early-Size"><a href="#Early-Size" class="headerlink" title="Early Size"></a>Early Size</h3><p>以毫秒为单位，调整早期脉冲能量的时长。10 到 50 ms 的长度可以模拟较小空间中早期反射的声学效果，也可以创造出一个很宽的立体声像，并且没有晚期混响（当 <code>Depth</code> 设置到0%）。当 <code>Early Size</code> 在 50 到 100 ms之间时，可以营造出一种“被压缩”的房间的感觉，听上去会像是早期的Attack被限制器或者磁带饱和抑制住了一样。而大于 100 ms 的设置会听起来像门限混响（Gated Reverb），并且当早期混响能量发送给晚期混响时（关于早期混响的发送见下文），可以创造出一种慢 Attack 的感觉。较大的 <code>Early Size</code> 值可以创造出长的门限混响的声音。</p>
<h3 id="Early-Cross"><a href="#Early-Cross" class="headerlink" title="Early Cross"></a>Early Cross</h3><p>控制了早期混响立体声的交叉混合。当设置为 0% 时，左右声道之间的信号不会相互混合，也就是说，左声道中不会有任何右声道信号的早期反射声。超过 0% 的参数值会使左右声道之间的信号混合，增加回声密度。一般来说，较低的 <code>Early Cross</code> 值能够使得混音中的空间成像不被改变太多。</p>
<h3 id="Mod-Rate"><a href="#Mod-Rate" class="headerlink" title="Mod Rate"></a>Mod Rate</h3><p>控制早期混响合唱效果的基频，以赫兹 Hz 为单位。因为在合唱效果里有很多随机化的东西，所以这里的基频指的是平均值。0.25 到 0.5 Hz左右的数值能够带来温暖的声音，1 到 2 Hz的数值能够给声音增加一点弦乐齐奏感。</p>
<h3 id="Mod-Depth"><a href="#Mod-Depth" class="headerlink" title="Mod Depth"></a>Mod Depth</h3><p>控制早期混响合唱效果的深度。一般来说，在创建真实的小空间的时候，这个数值低一点比较合适；而在创建大空间或者模仿老式混响的时候，就需要把它调大。</p>
<h3 id="Early-Send"><a href="#Early-Send" class="headerlink" title="Early Send"></a>Early Send</h3><p>控制有多少早期混响被送到晚期混响中。在设计早期混响时，我们就旨在它和晚期混响无缝衔接，所以当发送早期信号到晚期混响里时，会带来一个相对没有色彩的回声密度。当 <code>Early Send</code> 为0，就意味着没有发送（也就是早期混响和晚期混响完全平行），而当它为 1 时，就是最大的发送量。</p>
<h3 id="Diffusion"><a href="#Diffusion" class="headerlink" title="Diffusion"></a>Diffusion</h3><p>控制早期混响的回声密度（Echo density）。这个参数越低，早期混响的密度就越低。反之亦然。在很多算法混响中，高 <code>Diffusion</code> 值会让人声和鼓的混响中出现带有金属声的晚期混响，而 Valhalla Room 里不会有这样的情况。所以在大多数情况下，都可以把 <code>Diffusion</code> 设置为1。如果把 <code>Diffusion</code> 设置成比较低的数值，配合上较大的 <code>Early Size</code>，可以创造出奇怪的多重回声效果。</p>
<p>以下是一些设置 Early 参数的建议：</p>
<ul>
<li>将 <code>Early Size</code> 设置为10 到 50 ms，<code>Early Send</code> 设置为1，以创造一个密度高的晚期混响。</li>
<li>将 <code>Early Size</code> 设置为 150 ms 甚至更长，<code>Early Send</code> 设置为 1，以创造一个建立较慢的晚期混响的开头。这种设置可以很好的模拟厅堂和大教堂，也可以增加信号清晰度。</li>
<li>将 <code>Early Size</code> 设置为 70 到 100 ms，早期发送设置为 0，<code>Late Size</code>（之后会讲到）设置较小的值，<code>Depth</code> 设置为 0.5，以模拟一个较小的，Attack有压缩感的空间。</li>
</ul>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南03：混响模式</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9703%EF%BC%9A%E6%B7%B7%E5%93%8D%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p> 本文是 Valhalla Room 插件使用指南的第三篇，简单介绍了四个混响模式的特点和用法，实际使用中不必太深究他们名字代表的含义，只要听起来符合需求即可。</p>
</blockquote>
<p><em>翻译：Alistar</em> </p>
<p>Valhalla Room 的一个核心功能就是它不止有一个混响算法。相反，它有四个不同的算法（最新版本已经更新到了12种），每一个算法都有独特的声音特性。在<code>Reverb Mode</code>一栏可以在不同算法间进行选择。</p>
<p>以下是四个算法的简短介绍。</p>
<span id="more"></span>

<h3 id="Large-Room"><a href="#Large-Room" class="headerlink" title="Large Room"></a>Large Room</h3><p>这个算法是四个算法种最“自然”的。混响一开始比较稀疏，然后很快就建立起一个较高的反射密度。混响声的衰减是指数型的，在衰减的过程中，很精细地控制了频率的平衡。和现实中的房间一样，这个算法对高频有少量的吸收，对应着空气对高频的影响。Large Room 里的调制（Modulation）算法是为了得到一个更宽的立体声像，但不会带来随机的音高偏移。Mod Depth 参数设置得越高，就会得到一个“越深”的声音，但与此同时会保持输入信号的音高不变。而设置为较小的 Mod Depth 值会得到一个比较自然的衰减。</p>
<h3 id="Medium-Room"><a href="#Medium-Room" class="headerlink" title="Medium Room"></a>Medium Room</h3><p>这个算法模拟的房间听感比 Large Room 算法会更宽一些，这个房间会听起来更像是方形的，而不是像 Large Room 一样是鞋盒状的。它的早期反射是四个算法中最稀疏的，而当 <code>Late Size</code> 参数设置到最大的时候，会有明显可听到的回声。这也带来了更宽的立体声扩散，在某些特定的声音上是很好用的。而它的调制算法会比 Large Room 更随机，并且当混响时间设置得较长的时候，会出现随机的音高变化。而这种音高变化也是许多早期 <code>Lexicon Box</code> 中“经典”混响算法的特点。</p>
<h3 id="Bright-Room"><a href="#Bright-Room" class="headerlink" title="Bright Room"></a>Bright Room</h3><p>这个算法的 Attack 比其它算法都要慢一点。这种较慢的 Attack 也是厅堂混响的特点，也可以在“经典”数字混响中听到这种特性，Valhalla Shimmer 也有这个特性（但 Bright Room 算法的 Attack 要比 Shimmer 要快得多）。Bright Room 算法的混响会有更多的高频“空气感”和“光泽”，可以说 Bright Room 比其他算法更“数字”（而且是好的方面）。Bright Room 的调制算法是随机的，复杂的，并且更有深度，目的是为了给任何输入信号都提供丰富的合唱效果。在某些参数下，它的声音听起来会像弦乐的合奏，并且在长的混响时间下，它会把静态的输入信号变得很有变化。当我想要模拟 Vangelis  的《Blade Runner》中的混响时，Bright Room 会是我的首选。</p>
<h3 id="Large-Chamber"><a href="#Large-Chamber" class="headerlink" title="Large Chamber"></a>Large Chamber</h3><p>这个算法和 Large Room 算法有很多共同点，但 Large Chamber 的早期反射的回声密度会更平均。它以较高的回声密度开始，近似于回声室和小房间里的高回声密度，而没有模拟大多数房间的稀疏的早期反射。使用 Large Chamber 的目的是为了获得一种“比生命还大”的声音，具有小空间的回声密度，但同时又有大厅的模态密度。如此一来，我们就得到了一个“无色”的混响，适合各种各样的声音信号，它可以用来模拟混响室，房间，大厅等等，但不会给声音带来一个特定的“空间”。你听到的会是衰减，而不是墙壁。Large Chamber 的调制算法和混响时间与 Large Room 类似，不同的是，它混响中的初始“变调”比 Large Room 中要分散得多。</p>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南02：滑块</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9702%EF%BC%9A%E6%BB%91%E5%9D%97/</url>
    <content><![CDATA[<blockquote>
<p>本文是Valhalla Room插件使用指南的第二篇，简述了五个主要的控制项：MIX，PREDLAY，DECAY，HIGH CUT，DEPTH的具体作用。</p>
</blockquote>
<span id="more"></span>
<p><em>翻译：Alistar</em></p>
<p><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/20230116/Valhalla-room-sliders.38fxa6zjtv60.jpg"></p>
<hr>
<p>Valhalla Room的图形界面（GUI）分为几个部分。GUI的左边部分是滑块部分，它们代表的参数对声音有<strong>最显著和最直接</strong>的影响。</p>
<p>从左到右，参数是：</p>
<h3 id="MIX"><a href="#MIX" class="headerlink" title="MIX"></a>MIX</h3><p>Mix滑块控制<strong>干湿信号之间的比例</strong>，以百分比显示。0%代表完全是干声，100%代表完全是湿声。Mix滑块使用正弦&#x2F;余弦交叉渐变，因此，Mix不管是什么数值，信号的音量都是平衡的。</p>
<h3 id="PREDELAY"><a href="#PREDELAY" class="headerlink" title="PREDELAY"></a>PREDELAY</h3><p>标准的预延时控制参数，它可以<strong>延迟早期和晚期反射的开始时间</strong>。这个参数以毫秒为单位。预延时对建立房间的“大小”是很有用的，因为在预延时之后才会听到第一次反射。它可以被看作是把空间内的“墙”移进或者移出。从非物理的角度来看，预延时参数是用来控制输入信号和晚期混响之间的间隙，当加长预延时时间，输入信号和混响之间的分离度就会上升，提升了源信号的清晰度。在过去，磁带回声（tape echo）被用来给混响室或者板混响的输入信号增加15到30ms的预延时。</p>
<h3 id="DECAY"><a href="#DECAY" class="headerlink" title="DECAY"></a>DECAY</h3><p>控制<strong>晚期混响的持续时间</strong>。这个参数也可以标成<code>RT60</code>。RT60代表混响（R）衰减到初始电平的1&#x2F;1oooth（-60dB）所需要的时间（T）。这个衰减时间的计算基于信号的中频（因为不同频率的信号衰减速度不同）。而在Late部分中的<code>Bass Mult</code>和<code>High Mult</code>参数是用来调节低频和高频的衰减时间的，后文会详细讲述。</p>
<h3 id="HIGH-CUT"><a href="#HIGH-CUT" class="headerlink" title="HIGH CUT"></a>HIGH CUT</h3><p>用来调节低通滤波器（-12dB&#x2F;oct）的截止频率，单位为赫兹Hz。这个相对陡峭的斜率（-12dB&#x2F;oct）在高频中创造了一个更“自然”的声音，它反映了真实声学空间中<strong>空气和墙壁对高频的吸收</strong>。把这个参数设置在3000到7500Hz对于大多数较大的房间都是比较理想的。而更高的截止频率可以很好地模拟混响室，板混响和许多数字混响中明亮的声音。</p>
<h3 id="DEPTH"><a href="#DEPTH" class="headerlink" title="DEPTH"></a>DEPTH</h3><p>用来调节<strong>早期反射和晚期反射之间的平衡</strong>，以百分比计量。0%代表只有早期反射，100%代表只有晚期反射。DEPTH同样采用正余弦交叉渐变的方式处理。除此之外，我们做了大量的工作来让早期和晚期混响部分的电平“标准化”，以便使它们的输出电平在几乎整个DECAY范围内保持平衡。这个参数被我们叫做<code>DEPTH</code>，是为了向一些经典的数字混响器致敬，比如<code>Lexicon 224</code>和<code>Eventide SP2016</code>，它们的特点就是可以调节<code>DEPTH</code>参数，来调整早期和晚期反射之间的平衡。这个参数模拟了将室内的话筒靠近或远离声源的效果，更准确地说，是模拟了我们调节点话筒和房间话筒之间电平大小的过程。这个参数本来是叫做Early&#x2F;Late Mix，但是我不太喜欢这个文字在插件用户界面里的样子。</p>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Valhalla Room使用指南01：概览</title>
    <url>/2023/01/19/Valhalla-Room%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9701%EF%BC%9A%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<blockquote>
<p>本文是Valhalla Room插件使用指南的第一篇，简述了Valhalla Room界面中各部分的设计理念和功能。大概了解即可，对于插件的使用不是特别重要。</p>
</blockquote>
<span id="more"></span>
<p><em>翻译：Alistar</em></p>
<p><img src="https://cdn.staticaly.com/gh/AlistarOfficial/Image-saving@master/20230116/ValhallaRoomOldSchoolGUI-960x526.3hucfj0ge0q0.jpg"></p>
<hr>
<h3 id="插件标题"><a href="#插件标题" class="headerlink" title="插件标题"></a>插件标题</h3><p>在插件的顶端是插件标题：Valhalla Room，它的样式体现了我对字体的热爱。我使用了<code>Futura Demibold</code>这款字体，在我能接受的范围内，尽可能让它突出显示。从设计的角度看，这个标题是用来平衡插件底部的大面积空白空间的（空白区域的设计目的会在下面解释）。</p>
<h3 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h3><p>在标题的左下方有五个垂直滑块。滑动滑块（Mix，Predelay，Decay，High Cut，Depth）改变参数值，会对声音产生最直接显著的影响。在使用插件的过程中，很大可能上这五个滑块的操作频率是最高的。</p>
<h3 id="早晚期反射编辑"><a href="#早晚期反射编辑" class="headerlink" title="早晚期反射编辑"></a>早晚期反射编辑</h3><p>标题右下方的按钮是用来选择编辑早期反射还是晚期反射声。红色代表被选中，灰色代表未选中。</p>
<p>在早期反射&#x2F;晚期反射按钮的下方是早晚期反射声的控制参数。这些参数比五个红色的垂直滑块更容易控制，用户根据需要选择使用哪个模块。</p>
<h3 id="混响模式"><a href="#混响模式" class="headerlink" title="混响模式"></a>混响模式</h3><p>在滑块下方是混响模式选项。Valhalla Room提供了12种不同的混响算法，每一种都有独特的声音。</p>
<h3 id="预置"><a href="#预置" class="headerlink" title="预置"></a>预置</h3><p>在早晚期反射声按钮的下方是预置部分。当前选择的预置显示为红色。点击红色的字会打开预置菜单，在菜单里可以浏览，加载并保存预置。还可以复制当前的插件参数，也可以粘贴剪贴板里的参数到插件中（通过这个方式，我们可以很方便地在邮件和论坛里交换个人的预置）。</p>
<h3 id="插件提示"><a href="#插件提示" class="headerlink" title="插件提示"></a>插件提示</h3><p>插件窗口底部的黑色区域用来显示插件提示。当鼠标移动到滑块、旋钮、按钮等上方时，这个区域会显示提示，并简要解释这个控件的作用。右上方显示当前版本号，公司域名。</p>
<h3 id="GUI理念"><a href="#GUI理念" class="headerlink" title="GUI理念"></a>GUI理念</h3><p>GUI背后的理念是用一种合理的方式来整合这些控件，这样它们的大小和显示状态就能代表它们的相对重要性。我们也很自豪GUI采用了二维设计，每个控件都是抽象意义上的旋钮和滑块，而不是去仿造硬件的设计。我们选择了<code>Futura Demibold</code>这款字体，因为在NASA出具的《NASA可用性指南》的控制面板中也使用了这款字体，并且这个字体看起来很酷。我们着力于将插件说明文件设计成插件中的一个设计元素，于是有了插件下方的提示区域。这种尝试是受到了极简主义和瑞士学派的影响。</p>
]]></content>
      <categories>
        <category>插件说明文档</category>
      </categories>
      <tags>
        <tag>插件手册</tag>
        <tag>译制教程</tag>
      </tags>
  </entry>
</search>
